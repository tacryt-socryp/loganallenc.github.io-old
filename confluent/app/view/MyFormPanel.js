/*
 * File: app/view/MyFormPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Confluent.view.MyFormPanel', {
    extend: 'Ext.form.Panel',

    requires: [
        'Confluent.view.timeSlider'
    ],

    config: {
        submitted: false,
        centered: true,
        height: 495,
        id: 'MyFormPanel',
        itemId: 'MyFormPanel',
        width: 600,
        hideOnMaskTap: true,
        modal: true,
        hideAnimation: {
            type: 'fadeOut',
            duration: 750
        },
        showAnimation: {
            type: 'fadeIn',
            duration: 750
        },
        items: [
            {
                xtype: 'textfield',
                cls: 'eventTitle',
                itemId: 'eventTitle',
                label: 'Summary: '
            },
            {
                xtype: 'textareafield',
                cls: 'eventDescription',
                itemId: 'eventDescription',
                label: 'Description: ',
                autoCapitalize: true
            },
            {
                xtype: 'datepickerfield',
                itemId: 'datepicker',
                label: 'Date: ',
                picker: {
                    itemId: 'picker'
                }
            },
            {
                xtype: 'container',
                layout: {
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'container',
                        width: 515,
                        items: [
                            {
                                xtype: 'timeSlider',
                                listeners: {
                                    change: function(f) {
                                        var hours = f.getValue() / 2;
                                        var minutes = (hours - parseInt(hours, 10)) * 60;
                                        var ampm = ' am';
                                        hours = parseInt(hours, 10);
                                        if (hours > 12) {
                                            hours = hours - 12;
                                            ampm = ' pm';
                                        } else if (hours == 12) {
                                            ampm = ' pm';
                                        }
                                        
                                        if (hours < 10) {
                                            hours = '0' + hours;
                                        }
                                        
                                        if (minutes === 0) {
                                            minutes = '00';
                                        }
                                        
                                        var startLabel = document.getElementsByClassName('startLabel')[0];
                                        startLabel.innerText = hours + ':' + minutes + ampm;
                                        
                                    }
                                },
                                label: 'Start:',
                                labelWidth: 179,
                                required: false
                            }
                        ]
                    },
                    {
                        xtype: 'label',
                        cls: 'startLabel',
                        html: '12:00 am',
                        itemId: 'startLabel',
                        padding: '20 0 0 0',
                        style: 'background:#FFF;font-size:90%;',
                        width: 80
                    }
                ]
            },
            {
                xtype: 'container',
                layout: {
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'container',
                        width: 515,
                        items: [
                            {
                                xtype: 'timeSlider',
                                listeners: {
                                    change: function(f) {
                                        var hours = f.getValue() / 2;
                                        var minutes = (hours - parseInt(hours, 10)) * 60;
                                        var ampm = ' am';
                                        hours = parseInt(hours, 10);
                                        if (hours > 12) {
                                            hours = hours - 12;
                                            ampm = ' pm';
                                        } else if (hours == 12) {
                                            ampm = ' pm';
                                        }
                                        
                                        if (hours < 10) {
                                            hours = '0' + hours;
                                        }
                                        
                                        if (minutes === 0) {
                                            minutes = '00';
                                        }
                                        
                                        var endLabel = document.getElementsByClassName('endLabel')[0];
                                        endLabel.innerText = hours + ':' + minutes + ampm;
                                        
                                    }
                                },
                                label: 'End: ',
                                labelWidth: 179,
                                required: false
                            }
                        ]
                    },
                    {
                        xtype: 'label',
                        cls: 'endLabel',
                        html: '12:00 am',
                        itemId: 'endLabel',
                        padding: '20 0 0 0',
                        style: 'background:#FFF; font-size:90%;',
                        width: 80
                    }
                ]
            },
            {
                xtype: 'textareafield',
                cls: 'eventGuest',
                label: 'Guests:'
            },
            {
                xtype: 'toolbar',
                docked: 'bottom',
                width: '100%',
                layout: {
                    pack: 'center',
                    type: 'hbox'
                },
                items: [
                    {
                        xtype: 'button',
                        handler: function(button, event) {
                            var me = this,
                                summary = document.getElementsByClassName('x-input-text')[0].value,
                                description = document.getElementsByClassName('x-input-text')[1].value,
                                guests = document.getElementsByClassName('x-input-text')[3].value,
                                start = document.getElementsByClassName('startLabel')[0].innerHTML,
                                end = document.getElementsByClassName('endLabel')[0].innerHTML,
                                mainCarousel = Ext.ComponentQuery.query('#mainCarousel')[0],
                                myContainer = mainCarousel.getActiveItem(),
                                calendarId = myContainer.calendarId,
                                roomText = myContainer.roomText,
                                dateStart = new Date(),
                                dateEnd = new Date(),
                                attendee,
                                date;

                            var token = Confluent.app.authToken,
                                clientId = '464168127252.apps.googleusercontent.com',
                                apiKey = 'AIzaSyAy7JAsd5JlzjTR_fkkarby9N1c3YkhY6o',
                                scopes = 'https://www.googleapis.com/auth/calendar';

                            function returnTimestamp(date) {
                                var hours = date.getHours(),
                                    minutes = date.getMinutes(),
                                    months = date.getMonth() + 1,
                                    days = date.getDate(),
                                    timezone = ((date.getTimezoneOffset()/60)*-1);

                                if (hours < 10) {
                                    hours = '0' + hours;
                                }

                                if (minutes < 10) {
                                    minutes = '0' + minutes;
                                }

                                if (months < 10) {
                                    months = '0' + months;
                                }

                                if (days < 10) {
                                    days = '0' + days;
                                }

                                if (timezone > 0) {
                                    timezone = '+' + timezone;
                                }

                                if ((timezone < 10) || (timezone > -10)) {
                                    timezone = timezone.toString();
                                    timezone = timezone.substring(0,1) + '0' + timezone.substring(1);
                                }

                                return(date.getFullYear() + '-' + months + '-' + days + 'T' + hours + ':' + minutes + ':00.000' + timezone + ':00');
                            }

                            try {
                                date = Ext.ComponentQuery.query('#picker')[0].getValue();
                            } catch(e) {
                                date = new Date();
                            }

                            dateStart.setDate(date.getDate());
                            dateStart.setMonth(date.getMonth());
                            dateStart.setFullYear(date.getFullYear());

                            hours = parseInt(start.substring(0,2),10);
                            minutes = parseInt(start.substring(3,5),10);

                            if ((start.substring(6,8) == 'pm') && (hours != 12)) {
                                hours = hours + 12;
                            }

                            dateStart.setHours(hours);
                            dateStart.setMinutes(minutes);
                            dateStart.setSeconds(0);


                            dateEnd.setDate(date.getDate());
                            dateEnd.setMonth(date.getMonth());
                            dateEnd.setFullYear(date.getFullYear());

                            hours = parseInt(end.substring(0,2),10);
                            minutes = parseInt(end.substring(3,5),10);

                            if ((end.substring(6,8) == 'pm') && (hours != 12)) {
                                hours = hours + 12;
                            }

                            dateEnd.setHours(hours);
                            dateEnd.setMinutes(minutes);
                            dateEnd.setSeconds(0);

                            start = returnTimestamp(dateStart);
                            end = returnTimestamp(dateEnd);

                            var resource = {
                                'summary': summary,
                                'description': description,
                                'location': roomText,
                                'start': {
                                    'dateTime': start
                                },
                                'end': {
                                    'dateTime': end
                                },
                                'attendees': [
                                {
                                    'email': calendarId,
                                    'displayName': roomText,
                                    'responseStatus': 'needsAction'
                                }
                                ]
                            };

                            guests = guests.replace(/(\r\n|\n|\r)/gm,'');
                            guests = guests.replace(/\s+/g, '');
                            guests = guests.split(',');
                            for (var i=0; i<guests.length; i++) {
                                attendee = guests[i];
                                if (attendees !== '') {
                                    if (guests[i].indexOf('@') == -1) {
                                        attendee = attendee + '@bestfitmedia.com';
                                    }

                                    attendee = attendee.split('@');
                                    resource.attendees.push({
                                        'email': attendee[0] + '@' + attendee[1],
                                        'displayName': attendee[0],
                                        'responseStatus': 'needsAction'
                                    });
                                }
                            }

                            try {
                                gapi.client.setApiKey(apiKey);
                                gapi.auth.setToken(token);
                            } catch(e) {
                                window.location.reload();
                            }

                            gapi.auth.authorize({client_id: clientId, scope: scopes, immediate: true}, function(authResult) {
                            if (authResult) {
                                gapi.client.load('calendar', 'v3', function() {
                                    var request = gapi.client.calendar.events.insert({
                                        'calendarId': 'primary',
                                        'resource': resource
                                    });
                                    request.execute(function(resp) {
                                        console.log(resp);
                                        if (resp.id) {
                                            console.log("Success!");
                                        } else{
                                            console.log(" Error! ");
                                        }
                                        var formPanel = me.getParent().getParent();
                                        formPanel.submitted = true;
                                        formPanel.hide();
                                    });
                                });
                            }
                        });
                        },
                        ui: 'confirm',
                        width: '120px',
                        text: 'Submit'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onMyFormPanelHide',
                event: 'hide'
            }
        ]
    },

    onMyFormPanelHide: function(component, eOpts) {
        if (component.submitted) {
            var mainCarousel = Ext.ComponentQuery.query('#mainCarousel')[0],
                myContainer = mainCarousel.getActiveItem();
            window.setTimeout(myContainer.reloadData(), 2000);
        }
        window.setTimeout(function() {component.destroy();}, 2500);
    },

    initialize: function() {
        this.callParent();

        this.down('#datepicker').setValue(new Date());
    }

});